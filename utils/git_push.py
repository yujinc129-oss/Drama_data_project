# -*- coding: utf-8 -*-
"""git_push.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xHNIcjP11FbviGXDtRbVWWTcDymvCY9i
"""

def git_push(file_path):
  # --- 사용자 설정 ---
  # 1. GitHub 사용자 이름 또는 조직 이름
  # 예: "yujinc129-oss"
  GITHUB_USERNAME = "yujinc129-oss"

  # 2. 대상 저장소(Repository) 이름
  # 예: "Drama_data_project"
  REPO_NAME = "Drama_data_project"

  # 3. 업로드할 파일이 있는 Colab 내 로컬 경로
  # 예: "/content/my_processed_data.csv"
  # 파일을 Colab에 업로드하거나, Colab 내에서 생성한 파일의 경로를 지정합니다.
  COLAB_FILE_PATH = file_path # <--- 업로드할 파일 경로로 수정하세요.

  # 4. 파일이 업로드될 GitHub 저장소 내 경로
  # 예: "data/processed/my_processed_data.csv"
  GITHUB_FILE_PATH = f"data/processed/{os.path.basename(COLAB_FILE_PATH)}"

  # 5. 커밋 메시지
  COMMIT_MESSAGE = f"Add {os.path.basename(COLAB_FILE_PATH)} from Colab"
  # --------------------

  # Colab Secrets에서 GitHub 토큰 가져오기
  try:
      GITHUB_TOKEN = userdata.get('GITHUB_TOKEN')
  except userdata.SecretNotFoundError:
      print("🚨 Colab의 '비밀'에 GITHUB_TOKEN이 설정되지 않았습니다.")
      print("좌측 🔑 아이콘을 클릭하여 GITHUB_TOKEN을 추가해주세요.")
      raise

  # GitHub API에 인증
  g = Github(GITHUB_TOKEN)

  try:
      # 사용자(또는 조직) 정보 가져오기
      user = g.get_user(GITHUB_USERNAME)

      # 저장소(Repository) 객체 가져오기
      try:
          repo = user.get_repo(REPO_NAME)
      except GithubException:
          print(f"🚨 저장소 '{REPO_NAME}'를 찾을 수 없습니다.")
          print(f"'{GITHUB_USERNAME}' 사용자에게 해당 저장소가 있는지 확인해주세요.")
          raise

      # 업로드할 파일 내용 읽기
      try:
          with open(COLAB_FILE_PATH, 'rb') as file:
              content = file.read()
      except FileNotFoundError:
          print(f"🚨 Colab 경로에서 '{COLAB_FILE_PATH}' 파일을 찾을 수 없습니다.")
          print("파일이 해당 경로에 있는지 확인해주세요.")
          raise

      # 파일 업로드 (또는 업데이트)
      try:
          # 해당 경로에 파일이 이미 있는지 확인
          repo.get_contents(GITHUB_FILE_PATH)
          # 파일이 있다면 업데이트
          repo.update_file(
              path=GITHUB_FILE_PATH,
              message=f"Update {os.path.basename(COLAB_FILE_PATH)} from Colab",
              content=content,
              sha=repo.get_contents(GITHUB_FILE_PATH).sha,
              branch="main" # 또는 기본 브랜치 이름
          )
          print(f"✅ 파일 업데이트 성공: '{GITHUB_FILE_PATH}'")

      except GithubException as e:
          if e.status == 404:
              # 파일이 없다면 새로 생성
              repo.create_file(
                  path=GITHUB_FILE_PATH,
                  message=COMMIT_MESSAGE,
                  content=content,
                  branch="main" # 또는 기본 브랜치 이름
              )
              print(f"✅ 파일 업로드 성공: '{GITHUB_FILE_PATH}'")
          else:
              print("🚨 파일 업로드/업데이트 중 오류가 발생했습니다.")
              raise

  except GithubException as e:
      print(f"🚨 GitHub API 오류가 발생했습니다: {e}")
      print("- GitHub 사용자 이름, 저장소 이름이 올바른지 확인하세요.")
      print("- 개인 액세스 토큰의 'repo' 권한이 올바르게 설정되었는지 확인하세요.")
  except Exception as e:
      print(f"오류가 발생했습니다: {e}")
